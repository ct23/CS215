/**
 * Title: Merge Sort
 */

/**
 * @author Colin
 * @date Mar 12, 2016
 *
 *
 * Modifications:
 * Date			Changes
 * 
 */
public class MergeSort {
	int[] arrayOne;
	int[] arrayTwo;
	
	/**
	 * @param int[] origArray	Array to be merged
	 * @param int p				Position of first element in first subarray
	 * @param int q				Position of last element in first subarray
	 * @param int r				Position of last element in second subarray
	 * @return long duration	Time to sort, in nanoseconds
	 */
	public long merge(int[] origArray, int p, int q, int r) {
		
		// Start duration clock
		long duration = System.nanoTime();
		
		// Calculate number of objects to be placed in each array
		int sizeOne = q - p + 1;
		int sizeTwo = r - q;
		
		// Create two subarrays
		arrayOne = new int[sizeOne];
		arrayTwo = new int[sizeTwo];
		
		// Populate subarrays
		System.arraycopy(origArray, p, arrayOne, 0, sizeOne);
		System.arraycopy(origArray, q + 1, arrayTwo, 0, sizeTwo);
		
		// ints to track array positions
		int i = 0; // start at arrayOne[i]
		int j = 0; // start at arrayTwo[j]
		// Scan origArray from p to r
		for (int k = p; k <= r; k++) {
			// Check whether we've reached end of array
			if (i < sizeOne) {
				if (j < sizeTwo) {
					
					// Take the smaller of the two elements (or first if equal)
					if (arrayOne[i] <= arrayTwo[j]) {
						origArray[k] = arrayOne[i];
						i++;
					} else {
						origArray[k] = arrayTwo[j];
						j++;
					}
				} else {
					// if j >= sizeTwo, arrayTwo is "empty"
					// fill all remaining values from arrayOne
					fillFromOne(origArray, k, i, r);
					break;
				}
			} else {
				// if i >= sizeOne arrayOne is "empty"
				// fill all remaining values from arrayTwo
				fillFromTwo(origArray, k, j, r);
				break;
			}
		}
		
		
		// Calculate, then return, elapsed time
		duration = System.nanoTime() - duration;
		return duration;
	}
	
	private void fillFromOne(int[] origArray, int k, int i, int r) {
		for (int a = k; a <= r; a++) {
			origArray[a] = arrayOne[i];
			i++;
		}
	}
	private void fillFromTwo(int[] origArray, int k, int j, int r) {
		for (int a = k; a <= r; a++) {
			origArray[a] = arrayTwo[j];
			j++;
		}
	}
}
