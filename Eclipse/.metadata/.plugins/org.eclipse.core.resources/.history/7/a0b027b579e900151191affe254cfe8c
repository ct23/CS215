import java.util.Arrays;

/**
 * Title: Tests
 * Desc:  Runs time tests user-specified number of times.
 */

/**
 * @author Colin
 * @date Jan 31, 2016
 *
 *
 * Modifications:
 * Date			Changes
 * 
 */
public class Tests {
	InsertionSort insSorter = new InsertionSort();
	MergeSort mSorter = new MergeSort();
	HeapSort hSorter = new HeapSort();
	
	long avgRandomIns = 0;
	long avgBestIns = 0;
	long avgWorstIns = 0;
	long avgRandomM = 0;
	long avgBestM = 0;
	long avgWorstM = 0;
	long avgRandomH = 0;
	long avgBestH = 0;
	long avgWorstH = 0;
	
	int[] usableOArray;
	int[] usableSArray;
	int[] usableRArray;
	
	public void run(int arraySize, int numTests) {
		
		ReverseSort revSorter = new ReverseSort();
		GenerateArrays arrayGenerator = new GenerateArrays();
		
		// Generate arrays
		ArrayObject arrays = arrayGenerator.generate(arraySize);
		int[] origArray = arrays.original;
		int[] sortedArray = arrays.sorted;
		int[] reverseArray = arrays.reverse;
		
		// Copy arrays, so as not to modify originals
		usableOArray = origArray.clone();
		usableSArray = sortedArray.clone();
		usableRArray = reverseArray.clone();
		
		// Print original array, sorted array, and reverse sorted array.
		System.out.println("Original array (average input):\n" + Arrays.toString(origArray));
		long duration = insSorter.regSort(sortedArray);
		System.out.println("Sorted array (best-case input):\n" + Arrays.toString(sortedArray));
		//System.out.println("Time to sort: " + duration);
		revSorter.revSort(reverseArray);
		System.out.println("Reverse sorted array (worst-case input):\n" + Arrays.toString(reverseArray));
		
		System.out.println("Running tests...");
		
		// Run insertion sort tests
		// Run merge sort tests
		// Run heap sort tests
		for (int i = 0; i < numTests; i++) {
			// Sort each array
			long avgSortTime = insSorter.regSort(usableOArray);
			long bestSortTime = insSorter.regSort(usableSArray);
			long worstSortTime = insSorter.regSort(usableRArray);
			
			// Print all times
			System.out.println("\nAverage input: " + avgSortTime + "\tBest-case: " + bestSortTime
							   + "\t\tWorst-case: " + worstSortTime);
			
			// Add times to averages
			avgRandomIns += avgSortTime;
			avgBestIns += bestSortTime;
			avgWorstIns += worstSortTime;
			
			// Re-clone original arrays for next test
			usableOArray = origArray.clone();
			usableSArray = sortedArray.clone();
			usableRArray = reverseArray.clone();
		}
		
		// Calculate insertion sort average times
		avgRandomIns = avgRandomIns / numTests;
		avgBestIns = avgBestIns / numTests;
		avgWorstIns = avgWorstIns / numTests;
		
		// Print all average times
		System.out.println("\nInsertion Sort Averages:\nAverage input: " + avgRandomIns + "\tBest-case: " + avgBestIns
							   + "\t\tWorst-case: " + avgWorstIns);
		
	}
	
	InsertionTests
	// Run insertion sort tests specified number of times
	MergeTests
	
	HeapTests
}
